// <autogenerated />
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
{{#azure-spring-cloud}}
using Microsoft.Azure.SpringCloud.Client;
{{/azure-spring-cloud}}
{{#actuator-or-dynamic-logger}}
using Steeltoe.Extensions.Logging;
{{/actuator-or-dynamic-logger}}
{{#cloud-foundry}}
{{^config-server}}
using Steeltoe.Extensions.Configuration;
using Steeltoe.Extensions.Configuration.CloudFoundry;
{{/config-server}}
{{/cloud-foundry}}
{{#config-server}}
using Steeltoe.Extensions.Configuration.config-server;
{{/config-server}}
{{#placeholder}}
using Steeltoe.Extensions.Configuration.PlaceholderCore;
{{/placeholder}}
{{#random-value}}
using Steeltoe.Extensions.Configuration.RandomValue;
{{/ random-value}}
namespace {{Namespace}}
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args)
            .Build()
            {{#any-efcore}}
            .InitializeDbContexts()
            {{/any-efcore}}
            .Run();

        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args)
        {
            var builder = WebHost.CreateDefaultBuilder(args)
                .UseDefaultServiceProvider(configure => configure.ValidateScopes = false)
                {{#cloud-foundry}}
                .UseCloudFoundryHosting() //Enable listening on a Env provided port
                {{^config-server}}
                .AddCloudFoundry() //Add cloudfoundry environment variables as a configuration source
                {{/config-server}}
                {{/cloud-foundry}}
                {{#config-server}}
                .Addconfig-server()
                {{/config-server}}
                {{#placeholder}}
                .AddPlaceholderResolver()
                {{/placeholder}}
                {{#random-value}}
                .ConfigureAppConfiguration((b) => b.AddRandomValueSource())
                {{/random-value}}
                {{#azure-spring-cloud}}
                .UseAzureSpringCloudService()
                {{/azure-spring-cloud}}
                .UseStartup<Startup>();
{{#actuator-or-dynamic-logger}}
            builder.ConfigureLogging((hostingContext, loggingBuilder) =>
            {
                loggingBuilder.AddConfiguration(hostingContext.Configuration.GetSection("Logging"));
                loggingBuilder.AddDynamicConsole();
            });
{{/actuator-or-dynamic-logger}}
            return builder;
        }
    }
}
